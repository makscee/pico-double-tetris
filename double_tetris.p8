pico-8 cartridge // http://www.pico-8.com
version 32
__lua__
sizex = 12
sizey = 26
cell_size = 4
padding = 1
table={}
shape={{},{}}
move_dir={{0,1},{0,-1}}
s_speed=50
s_frames_left={}
colors={0,7}

cur_scene=0
scenes=
{
	{
		name="title",
		update=function()
			update_title()
		end,
		init=function()
			init_title()
		end,
		draw=function()
			draw_title()
		end,
	},
	{
		name="game",
		update=function()
			update_shape(1)
			update_shape(2)
			check_input()
		end,
		init=function()
			for x = 0, sizex - 1 do
				table[x] = {}
				for y = 0, sizey - 1 do
					if y < sizey / 2 then
						table[x][y] =
						{x=x,y=y,col=7,v=2}
					else
						table[x][y] =
						{x=x,y=y,col=0,v=1}
					end
				end
			end	
			xoffset = 64-(#table+1)*cell_size/2
			yoffset = 64-(#table[0]+1)*cell_size/2
			get_random_shape(1)
			get_random_shape(2)
			s_frames_left = {s_speed, s_speed}
			scores={0,0}
		end,
		draw=function()
			draw_field_back()
			for x,col in pairs(table) do
				for y,pixel in pairs(table[x]) do
					draw_cell(x,y,table[x][y].col)
				end
			end
			draw_scores()
			draw_shape(1)
			draw_shape(2)
		end,
	}
}

function load_scene(name)
	for ind,scene in pairs(scenes) do
		if scene.name == name then
			cur_scene = ind
			scene:init()
			break
		end
	end
end

function _init()
	palt(0,false)
	palt(14,true)
	init_particles()
	load_scene("title")
end

function _draw()
	cls()
	scenes[cur_scene]:draw()
	draw_particles()
	print_debug()
end

function draw_shape(v)
 for i=1,#shape[v] do
	draw_cell(
		shape[v][i].x + shape[v].x,
		shape[v][i].y + shape[v].y,
		shape[v].col)
 end
end

function _update60()
	update_coroutines()
	anim_update(60)
	update_particles(60)
	scenes[cur_scene]:update()
end

coroutines={}
function update_coroutines()
	local has_alive = false
	for k,cor in pairs(coroutines) do
		if costatus(cor) != 'dead' then
			coresume(cor)
			has_alive = true
		end
	end
	if not has_alive then
		for i=1,#coroutines do
			coroutines[i] = nil
		end
	end
end

function add_coroutine(c)
	coroutines[#coroutines+1]=cocreate(c)
end

function draw_field_back()
	local p = 1
	rectfill(xoffset - p, yoffset - p, xoffset + sizex * cell_size + p - 1, yoffset + sizey * cell_size + p - 1, 6)

	-- local p = 7
	-- local a = 8
	-- rectfill(xoffset - p, yoffset - p, xoffset + sizex * cell_size + p - 1 + a, yoffset + sizey / 2 * cell_size - 1, 6)
	-- rectfill(xoffset - p, yoffset + (sizey / 2 + 1) * cell_size - p / 2, xoffset + sizex * cell_size + p - 1 + a, yoffset + sizey * cell_size - 1 + p, 5)
end

function draw_cell(x,y,col)

	x0 = x*cell_size+xoffset
	y0 = y*cell_size+yoffset
	
	rectfill(x0,y0,
	x0+cell_size-padding,
	y0+cell_size-padding,
	col)
end

function draw_scores()
	local x = xoffset + 2
	local y1 = yoffset + 2
	local y2 = cell_size * sizey + yoffset - 7
	print(scores[1],x,y1,colors[1])
	print(scores[2],x,y2,colors[2])
end

function set_cell(x,y,v)
	local c
	if v == 2 then c = 7
	else c = 0 end
	table[x][y].col = c
	table[x][y].v = v
end

input_blocked=false
function check_input()
	if input_blocked then return end
	if btnp(⬅️) then
		move_shape_checked(-1,0,1)
		move_shape_checked(-1,0,2)
	end
	if btnp(➡️) then
		move_shape_checked(1,0,1)
		move_shape_checked(1,0,2)
	end
	if btnp(⬇️) then
		drop_shape(1)
	end
	if btnp(⬆️) then
		drop_shape(2)
	end
	if btnp(❎) then
		rotate_shape(1,true)
		rotate_shape(2,true)
	end
	if btnp(4) then
		rotate_shape(1,false)
		rotate_shape(2,false)
	end
end

function update_shape(v)
	s_frames_left[v] -= 1
	local dir = move_dir[v]
	if s_frames_left[v] <= 0 then
		s_frames_left[v] = s_speed
		if can_move_shape(dir[1],dir[2],v) then
			move_shape(dir[1],dir[2],v)
		else place_shape(v) end
	end
end

function move_shape(x,y,v)
	shape[v].x += x
	shape[v].y += y
end

function move_shape_checked(x,y,v)
	if can_move_shape(x,y,v) then
		shape[v].x += x
		shape[v].y += y
	end
end

function can_move_shape(x,y,v)
	for i=1,#shape[v] do
		local sx = shape[v][i].x + shape[v].x + x
		local sy = shape[v][i].y + shape[v].y + y
		if sx >= sizex or sy >= sizey or sx < 0 or sy < 0 or not is_empty_cell(sx,sy,v) then
			return false
		end
	end
	return true
end

function is_empty_cell(x,y,v)
	return table[x][y].v != v
end

function place_shape(v)
	for cell in all(shape[v]) do
		set_cell(cell.x + shape[v].x, cell.y + shape[v].y, v)
		particle_explosion((shape[v].x + cell.x) * cell_size + xoffset, (shape[v].y + cell.y) * cell_size + yoffset, shape[v].col, 10)
	end
	scores[v] += 1
	get_random_shape(v)
end

function get_random_shape(v)
	set_shape_cells(get_shape(flr(rnd(#all_shapes)) + 1, v), v)
	local miny=9999
	local maxy=-9999
	foreach(shape[v],function(cell) miny=min(miny, cell.y) maxy=max(maxy,cell.y) end)
	if v == 1 then
		shape[v].col = colors[v]
		shape[v].x = 5
		shape[v].y = -miny
	else
		shape[v].col = colors[v]
		shape[v].x = 5
		shape[v].y = sizey - maxy - 1
	end
end

function set_shape_cells(cells,v)
	for i=1,#shape[v] do	shape[v][i]=nil end
	for cell in all(cells) do
		shape[v][#shape[v]+1] = {x=cell[1],y=cell[2]}
	end
end

function rotate_shape(v,right)
	set_shape_cells(get_rotated_cells(right, v), v)
	if can_move_shape(0,0,v) then return end
	if can_move_shape(1,0,v) then move_shape(1,0,v) return end
	if can_move_shape(-1,0,v) then move_shape(-1,0,v) return end
	if can_move_shape(0,-1,v) then move_shape(0,-1,v) return end
	if can_move_shape(-2,0,v) then move_shape(-2,0,v) return end
	if can_move_shape(2,0,v) then move_shape(2,0,v) return end
	set_shape_cells(get_rotated_cells(false, v),v)
end

function drop_shape(v)
	add_coroutine(function() drop_coroutine(v) end)
	s_frames_left[v] = s_speed
end

function drop_coroutine(v)
	input_blocked = true
	local move_per_frame = 2
	local c = 0
	while can_move_shape(move_dir[v][1],move_dir[v][2],v) do
		move_shape(move_dir[v][1],move_dir[v][2],v)
		c += 1
		if c == move_per_frame then
			c = 0
			yield()
		end
	end
	place_shape(v)
	input_blocked = false
end

-->8
debug_str={}
function debug(str)
	debug_str[#debug_str+1] = str
end

function print_debug()
	for str in all(debug_str) do
		print(str)
	end
end


-->8
cur_shape = {}
cur_rotation = {}

all_shapes=
{
	{
 {{0,0},{0,-1},{-1,0},{1,0}},
 {{0,0},{0,-1},{0,1},{1,0}},
 {{0,0},{0,1},{-1,0},{1,0}},
 {{0,0},{0,-1},{0,1},{-1,0}},
 },
 {
 {{0,0},{0,-1},{-1,-1},{1,0}},
 {{0,0},{1,0},{1,-1},{0,1}},
 },
 {
 {{0,0},{-1,0},{0,-1},{1,-1}},
 {{0,0},{-1,0},{-1,-1},{0,1}},
 },
 {
 {{0,0},{-1,0},{-1,-1},{1,0}},
 {{0,0},{0,-1},{1,-1},{0,1}},
 {{0,0},{-1,0},{1,0},{1,1}},
 {{0,0},{0,-1},{0,1},{-1,1}},
 },
 {
 {{0,0},{1,0},{1,-1},{-1,0}},
 {{0,0},{0,-1},{0,1},{1,1}},
 {{0,0},{1,0},{-1,0},{-1,1}},
 {{0,0},{0,1},{0,-1},{-1,-1}},
 },
 {
 {{0,0},{0,1},{0,-1},{0,-2}},
 {{0,0},{-1,0},{1,0},{2,0}},
 },
 {
 {{0,0},{0,-1},{1,-1},{1,0}},
 },
}

function get_shape(ind,v)
	cur_shape[v]=ind
	cur_rotation[v]=1
	return all_shapes[ind][cur_rotation[v]]
end

function get_rotated_cells(right, v)
	local delta
	if right then delta = 1 else delta = -1 end
	cur_rotation[v] = (cur_rotation[v] - 1 + delta) % #all_shapes[cur_shape[v]]+1
	return all_shapes[cur_shape[v]][cur_rotation[v]]
end

title_text_delay=180
function init_title()
	letters=
	{
		{n=32,x=2, y=-150,speed=1.5+rnd(),ymax=48,col=0},
		{n=34,x=20,y=-150,speed=1.5+rnd(),ymax=48,col=0},
		{n=36,x=38,y=-150,speed=1.5+rnd(),ymax=48,col=0},
		{n=38,x=56,y=-150,speed=1.5+rnd(),ymax=48,col=0},
		{n=40,x=74,y=-150,speed=1.5+rnd(),ymax=48,col=0},
		{n=42,x=92,y=-150,speed=1.5+rnd(),ymax=48,col=0},
		{n=0,x=2, y=128,speed=-2-rnd(),ymax=64,col=7},
		{n=2,x=20,y=128,speed=-2-rnd(),ymax=64,col=7},
		{n=0,x=38,y=128,speed=-2-rnd(),ymax=64,col=7},
		{n=4,x=56,y=128,speed=-2-rnd(),ymax=64,col=7},
		{n=6,x=74,y=128,speed=-2-rnd(),ymax=64,col=7},
		{n=8,x=92,y=128,speed=-2-rnd(),ymax=64,col=7},
	}
	for k,l in pairs(letters) do
		if k < 7 then
			l.x += 5
		else
			l.x += 10
		end
	end
end

function update_title()
	for l in all(letters) do
		l.y += l.speed
		if l.y > l.ymax and l.speed > 0 or l.y < l.ymax and l.speed < 0 then
			l.speed = 0
			l.y = l.ymax
			particle_explosion(l.x+8,l.y+8,l.col,15)
		end
	end
	title_text_delay -= 1
	if btnp(❎) then
		load_scene("game")
	end
end

test_str=0
function draw_title()
	rectfill(0,0,128,64,7)
	rectfill(0,64,128,128,0)
	print(test_str, 3)
	color(0)
	for l in all(letters) do
		spr(l.n,l.x,l.y,2,2)
	end
	if (title_text_delay < 0 and title_text_delay % 30 < 20) then
		print("press ❎ to start", 33, 90, 7)
	end
end

-->8
particles={}

function init_particles()
	for i=1,100 do
		particles[#particles + 1] = create_particle()
	end
end

function update_particles(fps)
	for p in all(particles) do
		if p.enabled then
			p:update(fps)
		end
	end
end

function draw_particles()
	for p in all(particles) do
		if p.enabled then
			p:draw()
		end
	end
end

function particle_explosion(x, y, col, cnt)
	enable_particles(cnt,x,y,col)
end

function create_particle()
	local particle =
	{
		pos={x=0,y=0}, vel={x=0,y=0}, start_pos={x=0,y=0},
		size_cur=2, size_start=2, size_over_distance=-0.12,
		col=2,

		update = function(self,fps)
			self.pos.x += self.vel.x / fps
			self.pos.y += self.vel.y / fps
			self.size_cur = self.size_start + self.size_over_distance * v_mag{x=self.pos.x-self.start_pos.x,y=self.pos.y-self.start_pos.y}
			if self.size_cur <= 0 then self.enabled = false end
		end,

		draw = function(self)
			circfill(self.pos.x,self.pos.y,self.size_cur,self.col)
		end,

		enabled=false
	}
	return particle
end

function enable_particles(cnt, x, y, col)
	for p in all(particles) do
		if cnt == 0 then return end
		if not p.enabled then
			p.enabled = true
			p.pos = {x=x,y=y}
			p.start_pos = {x=x,y=y}
			p.col = col
			p.vel = v_mults(random_circle_vec(), 20 + rnd(17))
			cnt-=1
		end
	end
end

function random_circle_vec()
	return v_normalize{x=rnd() - 0.5, y=rnd() - 0.5}
end



-->8
--vectors

function v_addv( v1, v2 )
  return { x = v1.x + v2.x, y = v1.y + v2.y }
end

-- subtract v2 from v1
function v_subv( v1, v2 )
  return { x = v1.x - v2.x, y = v1.y - v2.y }
end

-- multiply v by scalar n
function v_mults( v, n )
  return { x = v.x * n, y = v.y * n }
end

-- divide v by scalar n
function v_divs( v, n )
  return { x = v.x / n, y = v.y / n }
end

-- gets magnitude of v, squared (faster than v_mag)
function v_magsqr( v )
  return ( v.x * v.x ) + ( v.y * v.y )
end

-- compute magnitude of v
function v_mag( v )
  return sqrt( ( v.x * v.x ) + ( v.y * v.y ) )
end

-- normalizes v into a unit vector
function v_normalize( v )
  local len = v_mag( v )
  return { x = v.x / len, y = v.y / len }
end

-- computes dot product between v1 and v2
function v_dot( v1, v2 )
  return ( v1.x * v2.x ) + ( v1.y * v2.y )
end

-- computes the reflection vector between vector v and normal n
-- note : assumes v and n are normalized
function v_reflect( v, n )
  local dot = v_dot( v, n )
  local wdnv = v_mults( v_mults( n, dot ), 2.0 )
  local refv = v_subv( v, wdnv )
  return refv
end

-->8
--animator

anim_default_params=
{
	inter_type = "linear",
	pass_delta = true,
}

anim_operators={}
function anim_update(fps)
	for operator in all(anim_operators) do
		if operator.enabled then operator:update(fps) end
	end
end

function anim_interpolate(from, to, over, func, params)
	local operator
	for op in all(anim_operators) do
		if not op.enabled then
			operator = op
			break
		end
	end
	if (params == nil) params = {}
	params.from = from
	params.to = to
	params.over = over
	params.func = func
	if operator == nil then
		operator = {}
		anim_operators[#anim_operators + 1] = operator
	end
	anim_init_operator(operator, params)
end

function anim_init_operator(operator, params)
	for key,value in pairs(anim_default_params) do
		if params[key] == nil then
			params[key] = anim_default_params[key]
		end
	end

	operator.from = params.from
	operator.to = params.to
	operator.over = params.over
	operator.func = params.func
	operator.t = 0
	operator.v = params.from
	operator.inter_type = params.inter_type
	operator.pass_delta = params.pass_delta
	operator.enabled = true


	operator.update=function (self, fps)
		self.t += 1/fps;
		if self.t > self.over then
			self.enabled = false
			self.t = self.over
		end
		local part = self.t / self.over
		local new_v = anim_interpolate_float(self.from, self.to, part, self.inter_type)
		if self.pass_delta then self.func(new_v - self.v) else self.func(new_v) end
		self.v = new_v;
	end
end

function anim_interpolate_float(a, b, t, inter_type)
	if inter_type == nil or inter_type == "linear" then
		return a + (b - a) * t
	end

	return 0
end


__gfx__
ee66666666666666ee66666666666666ee66666666666eeeeeeeeeee66eeeeeeeeeee6666666666e000000000000000000000000000000000000000000000000
e777777777777776e777777777777776e77777777777666eeeeeeee776eeeeeeeeee77777777776e000000000000000000000000000000000000000000000000
e777777777777776e77777777777777ee777777777777766eeeeeee77eeeeeeeeee77777777777ee000000000000000000000000000000000000000000000000
eeeeeee776eeeeeee776eeeeeeeeeeeee776666666667776eeeeeeeeeeeeeeeeee777eeeeeeeeeee000000000000000000000000000000000000000000000000
eeeeeee776eeeeeee776eeeeeeeeeeeee776eeeeeeeee776eeeeeeee66eeeeeeee776eeeeeeeeeee000000000000000000000000000000000000000000000000
eeeeeee776eeeeeee776eeeeeeeeeeeee776eeeeeeeee776eeeeeee776eeeeeeee776eeeeeeeeeee000000000000000000000000000000000000000000000000
eeeeeee776eeeeeee77666666eeeeeeee776eeeeeeeee776eeeeeee776eeeeeeee77766666666eee000000000000000000000000000000000000000000000000
eeeeeee776eeeeeee77777776eeeeeeee776eeeeeeee777eeeeeeee776eeeeeeeee77777777766ee000000000000000000000000000000000000000000000000
eeeeeee776eeeeeee7777777eeeeeeeee776eeeeeee777eeeeeeeee776eeeeeeeeee77777777766e000000000000000000000000000000000000000000000000
eeeeeee776eeeeeee776eeeeeeeeeeeee777777777777eeeeeeeeee776eeeeeeeeeeeeeeeee7776e000000000000000000000000000000000000000000000000
eeeeeee776eeeeeee776eeeeeeeeeeeee7777777777766eeeeeeeee776eeeeeeeeeeeeeeeeee776e000000000000000000000000000000000000000000000000
eeeeeee776eeeeeee776eeeeeeeeeeeee77666666677766eeeeeeee776eeeeeeeeeeeeeeeeee776e000000000000000000000000000000000000000000000000
eeeeeee776eeeeeee776666666666666e776eeeeeee77766eeeeeee776eeeeeeeee66666666777ee000000000000000000000000000000000000000000000000
eeeeeee776eeeeeee777777777777776e776eeeeeeee7776eeeeeee776eeeeeeee77777777777eee000000000000000000000000000000000000000000000000
eeeeeee77eeeeeeee77777777777777ee77eeeeeeeeee77eeeeeeee77eeeeeeeee7777777777eeee000000000000000000000000000000000000000000000000
eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000
ee555555555555eeeeee5555555555eeee55eeeeeeeeee55ee555555555555eeee55eeeeeeeeeeeeee5555555555555500000000000000000000000000000000
e00000000000055eeee000000000055ee005eeeeeeeee005e00000000000055ee005eeeeeeeeeeeee00000000000000500000000000000000000000000000000
e000000000000055ee00000000000055e005eeeeeeeee005e000000000000055e005eeeeeeeeeeeee00000000000000e00000000000000000000000000000000
e005eeeeeeee0005e000eeeeeeee0005e005eeeeeeeee005e005eeeeeeee0005e005eeeeeeeeeeeee005eeeeeeeeeeee00000000000000000000000000000000
e005eeeeeeeee005e005eeeeeeeee005e005eeeeeeeee005e005eeeeeeeee005e005eeeeeeeeeeeee005eeeeeeeeeeee00000000000000000000000000000000
e005eeeeeeeee005e005eeeeeeeee005e005eeeeeeeee005e005eeeeeeeee005e005eeeeeeeeeeeee005eeeeeeeeeeee00000000000000000000000000000000
e005eeeeeeeee005e005eeeeeeeee005e005eeeeeeeee005e00555555555000ee005eeeeeeeeeeeee00555555eeeeeee00000000000000000000000000000000
e005eeeeeeeee005e005eeeeeeeee005e005eeeeeeeee005e00000000000005ee005eeeeeeeeeeeee00000005eeeeeee00000000000000000000000000000000
e005eeeeeeeee005e005eeeeeeeee005e005eeeeeeeee005e000000000000055e005eeeeeeeeeeeee0000000eeeeeeee00000000000000000000000000000000
e005eeeeeeeee005e005eeeeeeeee005e005eeeeeeeee005e005eeeeeeee0005e005eeeeeeeeeeeee005eeeeeeeeeeee00000000000000000000000000000000
e005eeeeeeeee005e005eeeeeeeee005e005eeeeeeeee005e005eeeeeeeee005e005eeeeeeeeeeeee005eeeeeeeeeeee00000000000000000000000000000000
e005eeeeeeeee005e0055eeeeeeee005e0055eeeeeeee005e005eeeeeeeee005e005eeeeeeeeeeeee005eeeeeeeeeeee00000000000000000000000000000000
e00555555555000ee00055555555000ee00055555555000ee00555555555000ee005555555555555e00555555555555500000000000000000000000000000000
e0000000000000eeee000000000000eeee000000000000eee0000000000000eee000000000000005e00000000000000500000000000000000000000000000000
e000000000000eeeeee0000000000eeeeee0000000000eeee000000000000eeee00000000000000ee00000000000000e00000000000000000000000000000000
eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000000000000
__label__
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888eeeeee888eeeeee888777777888888888888888888888888888888888888888888888888888888ff8ff8888228822888222822888888822888888228888
8888ee881ee88ee88eee88778887788888888888888888888888888888888888888888888888888888ff888ff888222222888222822888882282888888222888
888eee8171e8eeee8eee87777787788888e88888888888888888888888888888888888888888888888ff888ff888282282888222888888228882888888288888
888eee8171181eee8eee8777888778888eee8888888888888888888888888888888888888888888888ff888ff888222222888888222888228882888822288888
888eee81717171ee8eee87778777788888e88888888888888888888888888888888888888888888888ff888ff888822228888228222888882282888222288888
888eee11777771e888ee877788877888888888888888888888888888888888888888888888888888888ff8ff8888828828888228222888888822888222888888
888ee171777771eeeeee877777777888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
11111117777771111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11661611177711111166161616661666166611111ccc111111111111111111111111111111111111111111111111111111111111111111111111111111111111
16111616177711111611161616161616161117771c1c111111111111111111111111111111111111111111111111111111111111111111111111111111111111
16111616111111111666166616661666166111111c1c111111111111111111111111111111111111111111111111111111111111111111111111111111111111
16111616161611111116161616161611161117771c1c111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11661166161616661661161616161611166611111ccc111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11661616166611111666116616661666166616661166166111111ccc111111111111111111111111111111111111111111111111111111111111111111111111
16111616161611111616161611611616116111611616161617771c1c111111111111111111111111111111111111111111111111111111111111111111111111
16111616166111111661161611611666116111611616161611111c1c111111111111111111111111111111111111111111111111111111111111111111111111
16111616161611111616161611611616116111611616161617771c1c111111111111111111111111111111111111111111111111111111111111111111111111
11661166161616661616166111611616116116661661161611111ccc111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
16661611161111111166161616661666166611661111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
16161611161111111611161616161616161116111777111111111111111111111111111111111111111111111111111111111111111111111111111111111111
16661611161111111666166616661666166116661111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
16161611161111111116161616161611161111161777111111111111111111111111111111111111111111111111111111111111111111111111111111111111
16161666166616661661161616161611166616611111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11771111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11711111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
17711111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11711111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11771111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111177111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111171111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111771111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111171111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111177111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111117711771ccc11111ccc1771111111771ccc11111cc117711111117711111cc111111ccc1771111111771cc111111ccc177117711111111111111111
11111111117111711c1c11111c1c1171111111711c1c111111c1117111111171111111c111111c1c11711111117111c111111c1c117111711111111111111111
11111111177117711c1c11111c1c1177111117711c1c111111c11177111117711ccc11c111111c1c11771111177111c111111c1c117711771111111111111111
11111111117111711c1c11711c1c1171117111711c1c117111c1117111711171111111c111711c1c11711171117111c111711c1c117111711171111111111111
11111111117711771ccc17111ccc1771171111771ccc17111ccc17711711117711111ccc17111ccc1771171111771ccc17111ccc177117711711111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111117711771ccc11111ccc1771111111771ccc11111cc11771111111771ccc111111111cc11771111111771cc111111ccc177117711111111111111111
11111111117111711c1c11111c1c1171111111711c1c111111c11171111111711c1c1111111111c111711111117111c111111c1c117111711111111111111111
11111111177117711c1c11111c1c1177111117711c1c111111c11177111117711c1c11111ccc11c111771111177111c111111c1c117711771111111111111111
11111111117111711c1c11711c1c1171117111711c1c117111c11171117111711c1c1171111111c111711171117111c111711c1c117111711171111111111111
11111111117711771ccc17111ccc1771171111771ccc17111ccc1771171111771ccc171111111ccc1771171111771ccc17111ccc177117711711111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111117711771ccc11111ccc1771111111771ccc111111111cc117711111117711111cc111111ccc1771111111771cc111111ccc17711771111111111111
11111111117111711c1c11111c1c1171111111711c1c1111111111c1117111111171111111c111111c1c11711111117111c111111c1c11711171111111111111
11111111177117711c1c11111c1c1177111117711c1c11111ccc11c11177111117711ccc11c111111c1c11771111177111c111111c1c11771177111111111111
11111111117111711c1c11711c1c1171117111711c1c1171111111c1117111711171111111c111711c1c11711171117111c111711c1c11711171117111111111
11111111117711771ccc17111ccc1771171111771ccc171111111ccc17711711117711111ccc17111ccc1771171111771ccc17111ccc17711771171111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111117711771ccc11111ccc1771111111771ccc11111cc11771111111771ccc111111111cc117711111117711111cc111111ccc17711771111111111111
11111111117111711c1c11111c1c1171111111711c1c111111c11171111111711c1c1111111111c1117111111171111111c111111c1c11711171111111111111
11111111177117711c1c11111c1c1177111117711c1c111111c11177111117711c1c11111ccc11c11177111117711ccc11c111111c1c11771177111111111111
11111111117111711c1c11711c1c1171117111711c1c117111c11171117111711c1c1171111111c1117111711171111111c111711c1c11711171117111111111
11111111117711771ccc17111ccc1771171111771ccc17111ccc1771171111771ccc171111111ccc17711711117711111ccc17111ccc17711771171111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111771111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111171111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111177111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111171111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111771111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
17711111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11711111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11771111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11711111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
17711111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1eee1e1e1ee111ee1eee1eee11ee1ee1111111661666166611111166161616661666166611711666166116611171111111111111111111111111111111111111
1e111e1e1e1e1e1111e111e11e1e1e1e111116111611116111111611161616161616161117111161161616161117111111111111111111111111111111111111
1ee11e1e1e1e1e1111e111e11e1e1e1e111116111661116111111666166616661666166117111161161616161117111111111111111111111111111111111111
1e111e1e1e1e1e1111e111e11e1e1e1e111116161611116111111116161616161611161117111161161616161117111111111111111111111111111111111111
1e1111ee1e1e11ee11e11eee1ee11e1e111116661666116116661661161616161611166611711666161616661171111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111eee1eee1eee1e1e1eee1ee1111116661611161111111166161616661666166611661771166616611661117717711cc11177111111111111111111111111
11111e1e1e1111e11e1e1e1e1e1e1111161616111611111116111616161616161611161117111161161616161117171111c11117111111111111111111111111
11111ee11ee111e11e1e1ee11e1e1111166616111611111116661666166616661661166617111161161616161117171111c11117111111111111111111111111
11111e1e1e1111e11e1e1e1e1e1e1111161616111611111111161616161616111611111617111161161616161117171111c11117111111111111111111111111
11111e1e1eee11e111ee1e1e1e1e111116161666166616661661161616161611166616611771166616161666117717711ccc1177111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1eee1ee11ee111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1e111e1e1e1e11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1ee11e1e1e1e11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1e111e1e1e1e11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1eee1e1e1eee11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
82888222822882228888822882228882822882888888888888888888888888888888888888888888888888888222822282228882822282288222822288866688
82888828828282888888882882888828882882888888888888888888888888888888888888888888888888888282888282828828828288288282888288888888
82888828828282288888882882228828882882228888888888888888888888888888888888888888888888888222888282828828822288288222822288822288
82888828828282888888882888828828882882828888888888888888888888888888888888888888888888888282888282828828828288288882828888888888
82228222828282228888822282228288822282228888888888888888888888888888888888888888888888888222888282228288822282228882822288822288
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888

